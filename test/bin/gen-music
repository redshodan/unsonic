#!/usr/bin/env python3

import os, sys
from collections import ChainMap


TTS = "pico2wave -w %s '%s'"
MP3 = "lame -Sth --preset standard %s %s"
ID3 = "build/venv/bin/python3 -m eyed3.main"

# eyed3 arguments, used as keys to the TRACKS structure
ARTIST = "-a"
ALBUM = "-A"
TITLE = "-t"
GENRE = "-G"
YEAR = "-Y"

# [{attributes to apply to all tracks}, [{track}, {track}, {track}]]
TRACKS = \
[
    # Artist 1, 1 album
    [{ARTIST: "artist 1", ALBUM: "album 1"},
        [{TITLE: "song 1"}, {TITLE: "song 2"}, {TITLE: "song 3"},
         {TITLE: "song 4"}]],

    # Artist 2, 2 albums
    [{ARTIST: "artist 2", ALBUM: "album 1"},
        [{TITLE: "song 1"}, {TITLE: "song 2"}, {TITLE: "song 3"},
         {TITLE: "song 4"}, {TITLE: "song 5"}, {TITLE: "song 6"}]],
    [{ARTIST: "artist 2", ALBUM: "album 2", GENRE: "techno"},
        [{TITLE: "song 1"}, {TITLE: "song 2"}, {TITLE: "song 3"},
         {TITLE: "song 4"}, {TITLE: "song 5"}, {TITLE: "song 6"}]],

    # Artist 3, 1 album, two singles
    [{ARTIST: "artist 3", ALBUM: "album 1"},
        [{TITLE: "song 1"}, {TITLE: "song 2"}, {TITLE: "song 3"},
         {TITLE: "song 4"}, {TITLE: "song 5"}, {TITLE: "song 6"}]],
    [{ARTIST: "artist 3"},
        [{TITLE: "single 1"}, {TITLE:"single 2"}]],

    # Artist 3, no album, two singles
    [{ARTIST: "artist 3"},
        [{TITLE: "single 1"}, {TITLE:"single 2"}]],

    # Collection 1, 3 artists
    [{ALBUM: "collection 1"},
        [{ARTIST: "artist 1", TITLE: "song 1"},
         {ARTIST: "artist 2", TITLE: "song 2"},
         {ARTIST: "artist 3", TITLE: "song 3"}]],

    # Collection 2, 5 artists
    [{ALBUM: "collection 1"},
        [{ARTIST: "artist 1", TITLE: "song 1"},
         {ARTIST: "artist 2", TITLE: "song 2"},
         {ARTIST: "artist 3", TITLE: "song 3"},
         {ARTIST: "artist 4", TITLE: "song 4"},
         {ARTIST: "artist 5", TITLE: "song 5"}]],
        
    # two songs with no album or artist
    [{},
        [{TITLE: "no album-artist 1"}, {TITLE:"no album-artist 2"}]],
]

# Build out the full tracks
tracks = []
for apply_all, partial_tracks in TRACKS:
    for track in partial_tracks:
        track.update(apply_all)
        tracks.append(track)

# Make the mp3s
for track in tracks:
    artist_name = track[ARTIST] if ARTIST in track else "_"
    album_name = track[ALBUM] if ALBUM in track else "-"
    track_name = track[TITLE]

    wav_fname = "%s-%s-%s.wav" % (artist_name, album_name, track_name)
    wav_fname = wav_fname.replace(" ", "_")
    mp3_fname = wav_fname.replace(".wav", ".mp3")
    text = "%s. %s. %s." % (artist_name, album_name, track_name)
    
    # Make the wav
    cmd = TTS % (wav_fname, text)
    print(cmd)
    if os.system(cmd) != 0:
        print("TTS failed")
        sys.exit(-1)

    # Convert to mp3
    cmd = MP3 % (wav_fname, mp3_fname)
    print(cmd)
    if os.system(cmd) != 0:
        print("MP3 failed")
        sys.exit(-1)

    os.unlink(wav_fname)

    # Tag it
    cmd = []
    for arg, val in track.items():
        cmd.append(arg)
        cmd.append("'%s'" % val)
    cmd = "%s %s %s" % (ID3, " ".join(cmd), mp3_fname)
    print(cmd)
    if os.system(cmd) != 0:
        print("ID3 failed")
        sys.exit(-1)
